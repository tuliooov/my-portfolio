"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/imgix-url-builder";
exports.ids = ["vendor-chunks/imgix-url-builder"];
exports.modules = {

/***/ "(ssr)/./node_modules/imgix-url-builder/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/imgix-url-builder/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   buildPixelDensitySrcSet: () => (/* binding */ buildPixelDensitySrcSet),\n/* harmony export */   buildURL: () => (/* binding */ buildURL),\n/* harmony export */   buildWidthSrcSet: () => (/* binding */ buildWidthSrcSet)\n/* harmony export */ });\nconst camelCaseToParamCase = (input)=>{\n    return input.replace(/[A-Z]/g, (match)=>{\n        return `-${match.toLowerCase()}`;\n    });\n};\nconst buildURL = (url, params)=>{\n    const instance = new URL(url);\n    for(const camelCasedParamKey in params){\n        const paramKey = camelCaseToParamCase(camelCasedParamKey);\n        const paramValue = params[camelCasedParamKey];\n        if (paramValue === void 0) {\n            instance.searchParams.delete(paramKey);\n        } else if (Array.isArray(paramValue)) {\n            instance.searchParams.set(paramKey, paramValue.join(\",\"));\n        } else {\n            instance.searchParams.set(paramKey, `${paramValue}`);\n        }\n    }\n    const s = instance.searchParams.get(\"s\");\n    if (s) {\n        instance.searchParams.delete(\"s\");\n        instance.searchParams.append(\"s\", s);\n    }\n    return instance.toString();\n};\nconst buildPixelDensitySrcSet = (url, { pixelDensities, ...params })=>{\n    return pixelDensities.map((dpr)=>{\n        return `${buildURL(url, {\n            ...params,\n            dpr\n        })} ${dpr}x`;\n    }).join(\", \");\n};\nconst buildWidthSrcSet = (url, { widths, ...params })=>{\n    return widths.map((width)=>{\n        return `${buildURL(url, {\n            ...params,\n            w: void 0,\n            width\n        })} ${width}w`;\n    }).join(\", \");\n};\nclass Client {\n    /**\n   * Creates a new `Client` instance for an Imgix domain.\n   *\n   * @param options - Options to instantiate a new client.\n   *\n   * @returns A `Client` instance for the given Imgix domain.\n   */ constructor(options){\n        this.baseURL = options.baseURL;\n    }\n    /**\n   * Builds a URL to an Imgix image with Imgix URL API parameters for the\n   * client's base URL.\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n   * const url = client.buildURLForPath(\"/image.png\", { width: 400 });\n   * // => https://example.imgix.net/image.png?width=400\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({\n   * \tbaseURL: \"https://example.imgix.net/folder\",\n   * });\n   * const url = client.buildURLForPath(\"./image.png\", { width: 400 });\n   * // => https://example.imgix.net/folder/image.png?width=400\n   * ```\n   *\n   * @param path - Path to the image relative to the client's base URL.\n   * @param params - An object of Imgix URL API parameters.\n   *\n   * @returns The full absolute URL to the image with the given Imgix URL API\n   *   parameters applied.\n   */ buildURLForPath(path, params = {}) {\n        return buildURL(`${new URL(path, this.baseURL)}`, params);\n    }\n    /**\n   * Builds an `<img>` `srcset` attribute value for a given set of widths for\n   * the client's base URL. It can also optinally apply Imgix URL API parameters\n   * to the URLs.\n   *\n   * The `width` URL parameter will be applied for each `srcset` entry. If a\n   * `width` or `w` parameter is provided to the `params` parameter, it will be\n   * ignored.\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n   * const srcset = client.buildWidthSrcSetForPath(\"/image.png\", {\n   * \twidths: [400, 800, 1600],\n   * });\n   * // => https://example.imgix.net/image.png?width=400 400w,\n   * //    https://example.imgix.net/image.png?width=800 800w,\n   * //    https://example.imgix.net/image.png?width=1600 1600w\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({\n   * \tbaseURL: \"https://example.imgix.net\",\n   * });\n   * const srcset = client.buildWidthSrcSetForPath(\"/image.png\", {\n   * \twidths: [400, 800, 1600],\n   * \tsat: -100,\n   * });\n   * // => https://example.imgix.net/image.png?width=400&sat=-100 400w,\n   * //    https://example.imgix.net/image.png?width=800&sat=-100 800w,\n   * //    https://example.imgix.net/image.png?width=1600&sat=-100 1600w\n   * ```\n   *\n   * @param path - Path to the image relative to the client's base URL.\n   * @param params - An object of Imgix URL API parameters. The `widths`\n   *   parameter defines the resulting `srcset` widths.\n   *\n   * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n   *   parameters applied.\n   */ buildWidthSrcSetForPath(path, params) {\n        return buildWidthSrcSet(`${new URL(path, this.baseURL)}`, params);\n    }\n    /**\n   * Builds an `<img>` `srcset` attribute value for a given set of pixel\n   * densities for the client's base URL. It can also optinally apply Imgix URL\n   * API parameters to the URLs.\n   *\n   * The `dpr` URL parameter will be applied for each `srcset` entry. If a `dpr`\n   * parameter is provided to the `params` parameter, it will be ignored.\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n   * const srcset = client.buildPixelDensitySrcSetForPath(\"/image.png\", {\n   * \tpixelDensities: [1, 2, 3],\n   * });\n   * // => https://example.imgix.net/image.png?dpr=1 1x,\n   * //    https://example.imgix.net/image.png?dpr=2 2x,\n   * //    https://example.imgix.net/image.png?dpr=3 3x\n   * ```\n   *\n   * @example\n   *\n   * ```ts\n   * const client = new Client({ baseURL: \"https://example.imgix.net\" });\n   * const srcset = client.buildPixelDensitySrcSetForPath(\"/image.png\", {\n   * \tpixelDensities: [1, 2, 3],\n   * \tsat: -100,\n   * });\n   * // => https://example.imgix.net/image.png?dpr=1&sat=-100 1x,\n   * //    https://example.imgix.net/image.png?dpr=2&sat=-100 2x,\n   * //    https://example.imgix.net/image.png?dpr=3&sat=-100 3x\n   * ```\n   *\n   * @param path - Path to the image relative to the client's base URL.\n   * @param params - An object of Imgix URL API parameters. The `pixelDensities`\n   *   parameter defines the resulting `srcset` widths.\n   *\n   * @returns A `srcset` attribute value for `url` with the given Imgix URL API\n   *   parameters applied.\n   */ buildPixelDensitySrcSetForPath(path, params) {\n        return buildPixelDensitySrcSet(`${new URL(path, this.baseURL)}`, params);\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/imgix-url-builder/dist/index.mjs\n");

/***/ })

};
;