"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch";
exports.ids = ["vendor-chunks/node-fetch"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch/src/body.js":
/*!*********************************************!*\
  !*** ./node_modules/node-fetch/src/body.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   \"default\": () => (/* binding */ Body),\n/* harmony export */   extractContentType: () => (/* binding */ extractContentType),\n/* harmony export */   getTotalBytes: () => (/* binding */ getTotalBytes),\n/* harmony export */   writeToStream: () => (/* binding */ writeToStream)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fetch-blob */ \"(rsc)/./node_modules/fetch-blob/index.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors/base.js */ \"(rsc)/./node_modules/node-fetch/src/errors/base.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/node-fetch/src/utils/is.js\");\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */ \n\n\n\n\n\n\n\nconst pipeline = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_0__.pipeline);\nconst INTERNALS = Symbol(\"Body internals\");\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Body {\n    constructor(body, { size = 0 } = {}){\n        let boundary = null;\n        if (body === null) {\n            // Body is undefined or null\n            body = null;\n        } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n            // Body is a URLSearchParams\n            body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.toString());\n        } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n        // Body is blob\n        } else if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n        // Body is Buffer\n        } else if (node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body)) {\n            // Body is ArrayBuffer\n            body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body);\n        } else if (ArrayBuffer.isView(body)) {\n            // Body is ArrayBufferView\n            body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n        } else if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n        // Body is stream\n        } else if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n            // Body is FormData\n            body = (0,formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.formDataToBlob)(body);\n            boundary = body.type.split(\"=\")[1];\n        } else {\n            // None of the above\n            // coerce to string then buffer\n            body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(String(body));\n        }\n        let stream = body;\n        if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n            stream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body);\n        } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n            stream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body.stream());\n        }\n        this[INTERNALS] = {\n            body,\n            stream,\n            boundary,\n            disturbed: false,\n            error: null\n        };\n        this.size = size;\n        if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n            body.on(\"error\", (error_)=>{\n                const error = error_ instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error_ : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, \"system\", error_);\n                this[INTERNALS].error = error;\n            });\n        }\n    }\n    get body() {\n        return this[INTERNALS].stream;\n    }\n    get bodyUsed() {\n        return this[INTERNALS].disturbed;\n    }\n    /**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */ async arrayBuffer() {\n        const { buffer, byteOffset, byteLength } = await consumeBody(this);\n        return buffer.slice(byteOffset, byteOffset + byteLength);\n    }\n    async formData() {\n        const ct = this.headers.get(\"content-type\");\n        if (ct.startsWith(\"application/x-www-form-urlencoded\")) {\n            const formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData();\n            const parameters = new URLSearchParams(await this.text());\n            for (const [name, value] of parameters){\n                formData.append(name, value);\n            }\n            return formData;\n        }\n        const { toFormData } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch\").then(__webpack_require__.bind(__webpack_require__, /*! ./utils/multipart-parser.js */ \"(rsc)/./node_modules/node-fetch/src/utils/multipart-parser.js\"));\n        return toFormData(this.body, ct);\n    }\n    /**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */ async blob() {\n        const ct = this.headers && this.headers.get(\"content-type\") || this[INTERNALS].body && this[INTERNALS].body.type || \"\";\n        const buf = await this.arrayBuffer();\n        return new fetch_blob__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([\n            buf\n        ], {\n            type: ct\n        });\n    }\n    /**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */ async json() {\n        const text = await this.text();\n        return JSON.parse(text);\n    }\n    /**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */ async text() {\n        const buffer = await consumeBody(this);\n        return new TextDecoder().decode(buffer);\n    }\n    /**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */ buffer() {\n        return consumeBody(this);\n    }\n}\nBody.prototype.buffer = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(Body.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\");\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n    body: {\n        enumerable: true\n    },\n    bodyUsed: {\n        enumerable: true\n    },\n    arrayBuffer: {\n        enumerable: true\n    },\n    blob: {\n        enumerable: true\n    },\n    json: {\n        enumerable: true\n    },\n    text: {\n        enumerable: true\n    },\n    data: {\n        get: (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(()=>{}, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")\n    }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */ async function consumeBody(data) {\n    if (data[INTERNALS].disturbed) {\n        throw new TypeError(`body used already for: ${data.url}`);\n    }\n    data[INTERNALS].disturbed = true;\n    if (data[INTERNALS].error) {\n        throw data[INTERNALS].error;\n    }\n    const { body } = data;\n    // Body is null\n    if (body === null) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n    }\n    /* c8 ignore next 3 */ if (!(body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__)) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n    }\n    // Body is stream\n    // get ready to actually consume the body\n    const accum = [];\n    let accumBytes = 0;\n    try {\n        for await (const chunk of body){\n            if (data.size > 0 && accumBytes + chunk.length > data.size) {\n                const error = new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`content size at ${data.url} over limit: ${data.size}`, \"max-size\");\n                body.destroy(error);\n                throw error;\n            }\n            accumBytes += chunk.length;\n            accum.push(chunk);\n        }\n    } catch (error) {\n        const error_ = error instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, \"system\", error);\n        throw error_;\n    }\n    if (body.readableEnded === true || body._readableState.ended === true) {\n        try {\n            if (accum.every((c)=>typeof c === \"string\")) {\n                return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(accum.join(\"\"));\n            }\n            return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.concat(accum, accumBytes);\n        } catch (error) {\n            throw new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, \"system\", error);\n        }\n    } else {\n        throw new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n    }\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */ const clone = (instance, highWaterMark)=>{\n    let p1;\n    let p2;\n    let { body } = instance[INTERNALS];\n    // Don't allow cloning a used body\n    if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n    }\n    // Check that body is a stream and not form-data object\n    // note: we can't clone the form-data object without having it as a dependency\n    if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== \"function\") {\n        // Tee instance body\n        p1 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({\n            highWaterMark\n        });\n        p2 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({\n            highWaterMark\n        });\n        body.pipe(p1);\n        body.pipe(p2);\n        // Set instance body to teed body and return the other teed body\n        instance[INTERNALS].stream = p1;\n        body = p2;\n    }\n    return body;\n};\nconst getNonSpecFormDataBoundary = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)((body)=>body.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\");\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */ const extractContentType = (body, request)=>{\n    // Body is null or undefined\n    if (body === null) {\n        return null;\n    }\n    // Body is string\n    if (typeof body === \"string\") {\n        return \"text/plain;charset=UTF-8\";\n    }\n    // Body is a URLSearchParams\n    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n    }\n    // Body is blob\n    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n        return body.type || null;\n    }\n    // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n    if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body) || node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n        return null;\n    }\n    if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n        return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getBoundary === \"function\") {\n        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n    }\n    // Body is stream - can't really do much about this\n    if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n        return null;\n    }\n    // Body constructor defaults other things to string\n    return \"text/plain;charset=UTF-8\";\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */ const getTotalBytes = (request)=>{\n    const { body } = request[INTERNALS];\n    // Body is null or undefined\n    if (body === null) {\n        return 0;\n    }\n    // Body is Blob\n    if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n        return body.size;\n    }\n    // Body is Buffer\n    if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getLengthSync === \"function\") {\n        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n    }\n    // Body is stream\n    return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */ const writeToStream = async (dest, { body })=>{\n    if (body === null) {\n        // Body is null\n        dest.end();\n    } else {\n        // Body is stream\n        await pipeline(body, dest);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/errors/abort-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/abort-error.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/node-fetch/src/errors/base.js\");\n\n/**\n * AbortError interface for cancelled requests\n */ class AbortError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n    constructor(message, type = \"aborted\"){\n        super(message, type);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2Fib3J0LWVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBRXpDOztDQUVDLEdBQ00sTUFBTUMsbUJBQW1CRCxvREFBY0E7SUFDN0NFLFlBQVlDLE9BQU8sRUFBRUMsT0FBTyxTQUFTLENBQUU7UUFDdEMsS0FBSyxDQUFDRCxTQUFTQztJQUNoQjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9hYm9ydC1lcnJvci5qcz80NmVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmV0Y2hCYXNlRXJyb3J9IGZyb20gJy4vYmFzZS5qcyc7XG5cbi8qKlxuICogQWJvcnRFcnJvciBpbnRlcmZhY2UgZm9yIGNhbmNlbGxlZCByZXF1ZXN0c1xuICovXG5leHBvcnQgY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEZldGNoQmFzZUVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSA9ICdhYm9ydGVkJykge1xuXHRcdHN1cGVyKG1lc3NhZ2UsIHR5cGUpO1xuXHR9XG59XG4iXSwibmFtZXMiOlsiRmV0Y2hCYXNlRXJyb3IiLCJBYm9ydEVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/errors/abort-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/errors/base.js":
/*!****************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchBaseError: () => (/* binding */ FetchBaseError)\n/* harmony export */ });\nclass FetchBaseError extends Error {\n    constructor(message, type){\n        super(message);\n        // Hide custom error implementation details from end-users\n        Error.captureStackTrace(this, this.constructor);\n        this.type = type;\n    }\n    get name() {\n        return this.constructor.name;\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLHVCQUF1QkM7SUFDbkNDLFlBQVlDLE9BQU8sRUFBRUMsSUFBSSxDQUFFO1FBQzFCLEtBQUssQ0FBQ0Q7UUFDTiwwREFBMEQ7UUFDMURGLE1BQU1JLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNILFdBQVc7UUFFOUMsSUFBSSxDQUFDRSxJQUFJLEdBQUdBO0lBQ2I7SUFFQSxJQUFJRSxPQUFPO1FBQ1YsT0FBTyxJQUFJLENBQUNKLFdBQVcsQ0FBQ0ksSUFBSTtJQUM3QjtJQUVBLElBQUksQ0FBQ0MsT0FBT0MsV0FBVyxDQUFDLEdBQUc7UUFDMUIsT0FBTyxJQUFJLENBQUNOLFdBQVcsQ0FBQ0ksSUFBSTtJQUM3QjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9iYXNlLmpzPzQxOWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEZldGNoQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlKSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0Ly8gSGlkZSBjdXN0b20gZXJyb3IgaW1wbGVtZW50YXRpb24gZGV0YWlscyBmcm9tIGVuZC11c2Vyc1xuXHRcdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuXG5cdFx0dGhpcy50eXBlID0gdHlwZTtcblx0fVxuXG5cdGdldCBuYW1lKCkge1xuXHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG5cdH1cblxuXHRnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcblx0fVxufVxuIl0sIm5hbWVzIjpbIkZldGNoQmFzZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJ0eXBlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/errors/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/errors/fetch-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/fetch-error.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchError: () => (/* binding */ FetchError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/node-fetch/src/errors/base.js\");\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/ /**\n * FetchError interface for operational errors\n */ class FetchError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n    /**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */ constructor(message, type, systemError){\n        super(message, type);\n        // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n        if (systemError) {\n            // eslint-disable-next-line no-multi-assign\n            this.code = this.errno = systemError.code;\n            this.erroredSysCall = systemError.syscall;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2ZldGNoLWVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ3lDO0FBRXpDOztBQUVBLEdBRUE7O0NBRUMsR0FDTSxNQUFNQyxtQkFBbUJELG9EQUFjQTtJQUM3Qzs7OztFQUlDLEdBQ0RFLFlBQVlDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxXQUFXLENBQUU7UUFDdkMsS0FBSyxDQUFDRixTQUFTQztRQUNmLDhHQUE4RztRQUM5RyxJQUFJQyxhQUFhO1lBQ2hCLDJDQUEyQztZQUMzQyxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNDLEtBQUssR0FBR0YsWUFBWUMsSUFBSTtZQUN6QyxJQUFJLENBQUNFLGNBQWMsR0FBR0gsWUFBWUksT0FBTztRQUMxQztJQUNEO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2ZldGNoLWVycm9yLmpzPzFlYzEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge0ZldGNoQmFzZUVycm9yfSBmcm9tICcuL2Jhc2UuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7IGFkZHJlc3M/OiBzdHJpbmcsIGNvZGU6IHN0cmluZywgZGVzdD86IHN0cmluZywgZXJybm86IG51bWJlciwgaW5mbz86IG9iamVjdCwgbWVzc2FnZTogc3RyaW5nLCBwYXRoPzogc3RyaW5nLCBwb3J0PzogbnVtYmVyLCBzeXNjYWxsOiBzdHJpbmd9fSBTeXN0ZW1FcnJvclxuKi9cblxuLyoqXG4gKiBGZXRjaEVycm9yIGludGVyZmFjZSBmb3Igb3BlcmF0aW9uYWwgZXJyb3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBGZXRjaEVycm9yIGV4dGVuZHMgRmV0Y2hCYXNlRXJyb3Ige1xuXHQvKipcblx0ICogQHBhcmFtICB7c3RyaW5nfSBtZXNzYWdlIC0gICAgICBFcnJvciBtZXNzYWdlIGZvciBodW1hblxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IFt0eXBlXSAtICAgICAgICBFcnJvciB0eXBlIGZvciBtYWNoaW5lXG5cdCAqIEBwYXJhbSAge1N5c3RlbUVycm9yfSBbc3lzdGVtRXJyb3JdIC0gRm9yIE5vZGUuanMgc3lzdGVtIGVycm9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlLCBzeXN0ZW1FcnJvcikge1xuXHRcdHN1cGVyKG1lc3NhZ2UsIHR5cGUpO1xuXHRcdC8vIFdoZW4gZXJyLnR5cGUgaXMgYHN5c3RlbWAsIGVyci5lcnJvcmVkU3lzQ2FsbCBjb250YWlucyBzeXN0ZW0gZXJyb3IgYW5kIGVyci5jb2RlIGNvbnRhaW5zIHN5c3RlbSBlcnJvciBjb2RlXG5cdFx0aWYgKHN5c3RlbUVycm9yKSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbXVsdGktYXNzaWduXG5cdFx0XHR0aGlzLmNvZGUgPSB0aGlzLmVycm5vID0gc3lzdGVtRXJyb3IuY29kZTtcblx0XHRcdHRoaXMuZXJyb3JlZFN5c0NhbGwgPSBzeXN0ZW1FcnJvci5zeXNjYWxsO1xuXHRcdH1cblx0fVxufVxuIl0sIm5hbWVzIjpbIkZldGNoQmFzZUVycm9yIiwiRmV0Y2hFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInR5cGUiLCJzeXN0ZW1FcnJvciIsImNvZGUiLCJlcnJubyIsImVycm9yZWRTeXNDYWxsIiwic3lzY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/errors/fetch-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/headers.js":
/*!************************************************!*\
  !*** ./node_modules/node-fetch/src/headers.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Headers),\n/* harmony export */   fromRawHeaders: () => (/* binding */ fromRawHeaders)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */ \n\n/* c8 ignore next 9 */ const validateHeaderName = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName === \"function\" ? node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName : (name)=>{\n    if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_HTTP_TOKEN\"\n        });\n        throw error;\n    }\n};\n/* c8 ignore next 9 */ const validateHeaderValue = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue === \"function\" ? node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue : (name, value)=>{\n    if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n        const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_CHAR\"\n        });\n        throw error;\n    }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */ /**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */ class Headers extends URLSearchParams {\n    /**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */ constructor(init){\n        // Validate and normalize init object in [name, value(s)][]\n        /** @type {string[][]} */ let result = [];\n        if (init instanceof Headers) {\n            const raw = init.raw();\n            for (const [name, values] of Object.entries(raw)){\n                result.push(...values.map((value)=>[\n                        name,\n                        value\n                    ]));\n            }\n        } else if (init == null) {\n        // No op\n        } else if (typeof init === \"object\" && !node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(init)) {\n            const method = init[Symbol.iterator];\n            // eslint-disable-next-line no-eq-null, eqeqeq\n            if (method == null) {\n                // Record<ByteString, ByteString>\n                result.push(...Object.entries(init));\n            } else {\n                if (typeof method !== \"function\") {\n                    throw new TypeError(\"Header pairs must be iterable\");\n                }\n                // Sequence<sequence<ByteString>>\n                // Note: per spec we have to first exhaust the lists then process them\n                result = [\n                    ...init\n                ].map((pair)=>{\n                    if (typeof pair !== \"object\" || node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(pair)) {\n                        throw new TypeError(\"Each header pair must be an iterable object\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                }).map((pair)=>{\n                    if (pair.length !== 2) {\n                        throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                });\n            }\n        } else {\n            throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        }\n        // Validate and lowercase\n        result = result.length > 0 ? result.map(([name, value])=>{\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value));\n            return [\n                String(name).toLowerCase(),\n                String(value)\n            ];\n        }) : undefined;\n        super(result);\n        // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n        // eslint-disable-next-line no-constructor-return\n        return new Proxy(this, {\n            get (target, p, receiver) {\n                switch(p){\n                    case \"append\":\n                    case \"set\":\n                        return (name, value)=>{\n                            validateHeaderName(name);\n                            validateHeaderValue(name, String(value));\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n                        };\n                    case \"delete\":\n                    case \"has\":\n                    case \"getAll\":\n                        return (name)=>{\n                            validateHeaderName(name);\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n                        };\n                    case \"keys\":\n                        return ()=>{\n                            target.sort();\n                            return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n                        };\n                    default:\n                        return Reflect.get(target, p, receiver);\n                }\n            }\n        });\n    /* c8 ignore next */ }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Object.prototype.toString.call(this);\n    }\n    get(name) {\n        const values = this.getAll(name);\n        if (values.length === 0) {\n            return null;\n        }\n        let value = values.join(\", \");\n        if (/^content-encoding$/i.test(name)) {\n            value = value.toLowerCase();\n        }\n        return value;\n    }\n    forEach(callback, thisArg = undefined) {\n        for (const name of this.keys()){\n            Reflect.apply(callback, thisArg, [\n                this.get(name),\n                name,\n                this\n            ]);\n        }\n    }\n    *values() {\n        for (const name of this.keys()){\n            yield this.get(name);\n        }\n    }\n    /**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */ *entries() {\n        for (const name of this.keys()){\n            yield [\n                name,\n                this.get(name)\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */ raw() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            result[key] = this.getAll(key);\n            return result;\n        }, {});\n    }\n    /**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */ [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            const values = this.getAll(key);\n            // Http.request() only supports string as Host header.\n            // This hack makes specifying custom Host header possible.\n            if (key === \"host\") {\n                result[key] = values[0];\n            } else {\n                result[key] = values.length > 1 ? values : values[0];\n            }\n            return result;\n        }, {});\n    }\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */ Object.defineProperties(Headers.prototype, [\n    \"get\",\n    \"entries\",\n    \"forEach\",\n    \"values\"\n].reduce((result, property)=>{\n    result[property] = {\n        enumerable: true\n    };\n    return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */ function fromRawHeaders(headers = []) {\n    return new Headers(headers// Split into pairs\n    .reduce((result, value, index, array)=>{\n        if (index % 2 === 0) {\n            result.push(array.slice(index, index + 2));\n        }\n        return result;\n    }, []).filter(([name, value])=>{\n        try {\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value));\n            return true;\n        } catch  {\n            return false;\n        }\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/node-fetch/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError),\n/* harmony export */   Blob: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.Blob),\n/* harmony export */   FetchError: () => (/* reexport safe */ _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError),\n/* harmony export */   File: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   Request: () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Response: () => (/* reexport safe */ _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   blobFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFrom),\n/* harmony export */   blobFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ fetch),\n/* harmony export */   fileFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFrom),\n/* harmony export */   fileFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFromSync),\n/* harmony export */   isRedirect: () => (/* reexport safe */ _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! data-uri-to-buffer */ \"(rsc)/./node_modules/data-uri-to-buffer/dist/index.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/node-fetch/src/response.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./request.js */ \"(rsc)/./node_modules/node-fetch/src/request.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors/abort-error.js */ \"(rsc)/./node_modules/node-fetch/src/errors/abort-error.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/node-fetch/src/utils/is-redirect.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/node-fetch/src/utils/referrer.js\");\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportedSchemas = new Set([\n    \"data:\",\n    \"http:\",\n    \"https:\"\n]);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */ async function fetch(url, options_) {\n    return new Promise((resolve, reject)=>{\n        // Build request object\n        const request = new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](url, options_);\n        const { parsedURL, options } = (0,_request_js__WEBPACK_IMPORTED_MODULE_9__.getNodeRequestOptions)(request);\n        if (!supportedSchemas.has(parsedURL.protocol)) {\n            throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        }\n        if (parsedURL.protocol === \"data:\") {\n            const data = (0,data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(request.url);\n            const response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](data, {\n                headers: {\n                    \"Content-Type\": data.typeFull\n                }\n            });\n            resolve(response);\n            return;\n        }\n        // Wrap http.request into fetch\n        const send = (parsedURL.protocol === \"https:\" ? node_https__WEBPACK_IMPORTED_MODULE_1__ : node_http__WEBPACK_IMPORTED_MODULE_0__).request;\n        const { signal } = request;\n        let response = null;\n        const abort = ()=>{\n            const error = new _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError(\"The operation was aborted.\");\n            reject(error);\n            if (request.body && request.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n                request.body.destroy(error);\n            }\n            if (!response || !response.body) {\n                return;\n            }\n            response.body.emit(\"error\", error);\n        };\n        if (signal && signal.aborted) {\n            abort();\n            return;\n        }\n        const abortAndFinalize = ()=>{\n            abort();\n            finalize();\n        };\n        // Send request\n        const request_ = send(parsedURL.toString(), options);\n        if (signal) {\n            signal.addEventListener(\"abort\", abortAndFinalize);\n        }\n        const finalize = ()=>{\n            request_.abort();\n            if (signal) {\n                signal.removeEventListener(\"abort\", abortAndFinalize);\n            }\n        };\n        request_.on(\"error\", (error)=>{\n            reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`request to ${request.url} failed, reason: ${error.message}`, \"system\", error));\n            finalize();\n        });\n        fixResponseChunkedTransferBadEnding(request_, (error)=>{\n            if (response && response.body) {\n                response.body.destroy(error);\n            }\n        });\n        /* c8 ignore next 18 */ if (process.version < \"v14\") {\n            // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n            // properly handle when the socket close/end events are out of order.\n            request_.on(\"socket\", (s)=>{\n                let endedWithEventsCount;\n                s.prependListener(\"end\", ()=>{\n                    endedWithEventsCount = s._eventsCount;\n                });\n                s.prependListener(\"close\", (hadError)=>{\n                    // if end happened before close but the socket didn't emit an error, do it now\n                    if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                        const error = new Error(\"Premature close\");\n                        error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                        response.body.emit(\"error\", error);\n                    }\n                });\n            });\n        }\n        request_.on(\"response\", (response_)=>{\n            request_.setTimeout(0);\n            const headers = (0,_headers_js__WEBPACK_IMPORTED_MODULE_8__.fromRawHeaders)(response_.rawHeaders);\n            // HTTP fetch step 5\n            if ((0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)(response_.statusCode)) {\n                // HTTP fetch step 5.2\n                const location = headers.get(\"Location\");\n                // HTTP fetch step 5.3\n                let locationURL = null;\n                try {\n                    locationURL = location === null ? null : new URL(location, request.url);\n                } catch  {\n                    // error here can only be invalid URL in Location: header\n                    // do not throw when options.redirect == manual\n                    // let the user extract the errorneous redirect URL\n                    if (request.redirect !== \"manual\") {\n                        reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with an invalid redirect URL: ${location}`, \"invalid-redirect\"));\n                        finalize();\n                        return;\n                    }\n                }\n                // HTTP fetch step 5.5\n                switch(request.redirect){\n                    case \"error\":\n                        reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                        finalize();\n                        return;\n                    case \"manual\":\n                        break;\n                    case \"follow\":\n                        {\n                            // HTTP-redirect fetch step 2\n                            if (locationURL === null) {\n                                break;\n                            }\n                            // HTTP-redirect fetch step 5\n                            if (request.counter >= request.follow) {\n                                reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 6 (counter increment)\n                            // Create a new Request object.\n                            const requestOptions = {\n                                headers: new _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](request.headers),\n                                follow: request.follow,\n                                counter: request.counter + 1,\n                                agent: request.agent,\n                                compress: request.compress,\n                                method: request.method,\n                                body: (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.clone)(request),\n                                signal: request.signal,\n                                size: request.size,\n                                referrer: request.referrer,\n                                referrerPolicy: request.referrerPolicy\n                            };\n                            // when forwarding sensitive headers like \"Authorization\",\n                            // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                            // headers will be ignored when following a redirect to a domain\n                            // that is not a subdomain match or exact match of the initial domain.\n                            // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                            // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                            // headers will also be ignored when following a redirect to a domain using\n                            // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                            // will not forward the sensitive headers\n                            if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isDomainOrSubdomain)(request.url, locationURL) || !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isSameProtocol)(request.url, locationURL)) {\n                                for (const name of [\n                                    \"authorization\",\n                                    \"www-authenticate\",\n                                    \"cookie\",\n                                    \"cookie2\"\n                                ]){\n                                    requestOptions.headers.delete(name);\n                                }\n                            }\n                            // HTTP-redirect fetch step 9\n                            if (response_.statusCode !== 303 && request.body && options_.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n                                reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 11\n                            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === \"POST\") {\n                                requestOptions.method = \"GET\";\n                                requestOptions.body = undefined;\n                                requestOptions.headers.delete(\"content-length\");\n                            }\n                            // HTTP-redirect fetch step 14\n                            const responseReferrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__.parseReferrerPolicyFromHeader)(headers);\n                            if (responseReferrerPolicy) {\n                                requestOptions.referrerPolicy = responseReferrerPolicy;\n                            }\n                            // HTTP-redirect fetch step 15\n                            resolve(fetch(new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](locationURL, requestOptions)));\n                            finalize();\n                            return;\n                        }\n                    default:\n                        return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n                }\n            }\n            // Prepare response\n            if (signal) {\n                response_.once(\"end\", ()=>{\n                    signal.removeEventListener(\"abort\", abortAndFinalize);\n                });\n            }\n            let body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), (error)=>{\n                if (error) {\n                    reject(error);\n                }\n            });\n            // see https://github.com/nodejs/node/pull/29376\n            /* c8 ignore next 3 */ if (process.version < \"v12.10\") {\n                response_.on(\"aborted\", abortAndFinalize);\n            }\n            const responseOptions = {\n                url: request.url,\n                status: response_.statusCode,\n                statusText: response_.statusMessage,\n                headers,\n                size: request.size,\n                counter: request.counter,\n                highWaterMark: request.highWaterMark\n            };\n            // HTTP-network fetch step 12.1.1.3\n            const codings = headers.get(\"Content-Encoding\");\n            // HTTP-network fetch step 12.1.1.4: handle content codings\n            // in following scenarios we ignore compression support\n            // 1. compression support is disabled\n            // 2. HEAD request\n            // 3. no Content-Encoding header\n            // 4. no content response (204)\n            // 5. content not modified response (304)\n            if (!request.compress || request.method === \"HEAD\" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For Node v6+\n            // Be less strict when decoding compressed responses, since sometimes\n            // servers send slightly invalid responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            const zlibOptions = {\n                flush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,\n                finishFlush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH\n            };\n            // For gzip\n            if (codings === \"gzip\" || codings === \"x-gzip\") {\n                body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(zlibOptions), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For deflate\n            if (codings === \"deflate\" || codings === \"x-deflate\") {\n                // Handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                const raw = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                raw.once(\"data\", (chunk)=>{\n                    // See http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                        body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    } else {\n                        body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    }\n                    response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n                    resolve(response);\n                });\n                raw.once(\"end\", ()=>{\n                    // Some old IIS servers return zero-length OK deflate responses, so\n                    // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                    if (!response) {\n                        response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n                        resolve(response);\n                    }\n                });\n                return;\n            }\n            // For br\n            if (codings === \"br\") {\n                body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // Otherwise, use response as-is\n            response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n            resolve(response);\n        });\n        // eslint-disable-next-line promise/prefer-await-to-then\n        (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.writeToStream)(request_, request).catch(reject);\n    });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n    const LAST_CHUNK = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from(\"0\\r\\n\\r\\n\");\n    let isChunkedTransfer = false;\n    let properLastChunkReceived = false;\n    let previousChunk;\n    request.on(\"response\", (response)=>{\n        const { headers } = response;\n        isChunkedTransfer = headers[\"transfer-encoding\"] === \"chunked\" && !headers[\"content-length\"];\n    });\n    request.on(\"socket\", (socket)=>{\n        const onSocketClose = ()=>{\n            if (isChunkedTransfer && !properLastChunkReceived) {\n                const error = new Error(\"Premature close\");\n                error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                errorCallback(error);\n            }\n        };\n        const onData = (buf)=>{\n            properLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n            // Sometimes final 0-length chunk and end of message code are in separate packets\n            if (!properLastChunkReceived && previousChunk) {\n                properLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n            }\n            previousChunk = buf;\n        };\n        socket.prependListener(\"close\", onSocketClose);\n        socket.on(\"data\", onData);\n        request.on(\"close\", ()=>{\n            socket.removeListener(\"close\", onSocketClose);\n            socket.removeListener(\"data\", onData);\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/request.js":
/*!************************************************!*\
  !*** ./node_modules/node-fetch/src/request.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request),\n/* harmony export */   getNodeRequestOptions: () => (/* binding */ getNodeRequestOptions)\n/* harmony export */ });\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/get-search.js */ \"(rsc)/./node_modules/node-fetch/src/utils/get-search.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/node-fetch/src/utils/referrer.js\");\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ \n\n\n\n\n\n\nconst INTERNALS = Symbol(\"Request internals\");\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */ const isRequest = (object)=>{\n    return typeof object === \"object\" && typeof object[INTERNALS] === \"object\";\n};\nconst doBadDataWarn = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(()=>{}, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */ class Request extends _body_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(input, init = {}){\n        let parsedURL;\n        // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n        if (isRequest(input)) {\n            parsedURL = new URL(input.url);\n        } else {\n            parsedURL = new URL(input);\n            input = {};\n        }\n        if (parsedURL.username !== \"\" || parsedURL.password !== \"\") {\n            throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n        }\n        let method = init.method || input.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n            method = method.toUpperCase();\n        }\n        if (!isRequest(init) && \"data\" in init) {\n            doBadDataWarn();\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.clone)(input) : null;\n        super(inputBody, {\n            size: init.size || input.size || 0\n        });\n        const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](init.headers || input.headers || {});\n        if (inputBody !== null && !headers.has(\"Content-Type\")) {\n            const contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.extractContentType)(inputBody, this);\n            if (contentType) {\n                headers.set(\"Content-Type\", contentType);\n            }\n        }\n        let signal = isRequest(input) ? input.signal : null;\n        if (\"signal\" in init) {\n            signal = init.signal;\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (signal != null && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_4__.isAbortSignal)(signal)) {\n            throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        }\n        // §5.4, Request constructor steps, step 15.1\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        let referrer = init.referrer == null ? input.referrer : init.referrer;\n        if (referrer === \"\") {\n            // §5.4, Request constructor steps, step 15.2\n            referrer = \"no-referrer\";\n        } else if (referrer) {\n            // §5.4, Request constructor steps, step 15.3.1, 15.3.2\n            const parsedReferrer = new URL(referrer);\n            // §5.4, Request constructor steps, step 15.3.3, 15.3.4\n            referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? \"client\" : parsedReferrer;\n        } else {\n            referrer = undefined;\n        }\n        this[INTERNALS] = {\n            method,\n            redirect: init.redirect || input.redirect || \"follow\",\n            headers,\n            parsedURL,\n            signal,\n            referrer\n        };\n        // Node-fetch-only options\n        this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;\n        this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n        // §5.4, Request constructor steps, step 16.\n        // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || \"\";\n    }\n    /** @returns {string} */ get method() {\n        return this[INTERNALS].method;\n    }\n    /** @returns {string} */ get url() {\n        return (0,node_url__WEBPACK_IMPORTED_MODULE_0__.format)(this[INTERNALS].parsedURL);\n    }\n    /** @returns {Headers} */ get headers() {\n        return this[INTERNALS].headers;\n    }\n    get redirect() {\n        return this[INTERNALS].redirect;\n    }\n    /** @returns {AbortSignal} */ get signal() {\n        return this[INTERNALS].signal;\n    }\n    // https://fetch.spec.whatwg.org/#dom-request-referrer\n    get referrer() {\n        if (this[INTERNALS].referrer === \"no-referrer\") {\n            return \"\";\n        }\n        if (this[INTERNALS].referrer === \"client\") {\n            return \"about:client\";\n        }\n        if (this[INTERNALS].referrer) {\n            return this[INTERNALS].referrer.toString();\n        }\n        return undefined;\n    }\n    get referrerPolicy() {\n        return this[INTERNALS].referrerPolicy;\n    }\n    set referrerPolicy(referrerPolicy) {\n        this[INTERNALS].referrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.validateReferrerPolicy)(referrerPolicy);\n    }\n    /**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */ clone() {\n        return new Request(this);\n    }\n    get [Symbol.toStringTag]() {\n        return \"Request\";\n    }\n}\nObject.defineProperties(Request.prototype, {\n    method: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    redirect: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    },\n    signal: {\n        enumerable: true\n    },\n    referrer: {\n        enumerable: true\n    },\n    referrerPolicy: {\n        enumerable: true\n    }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */ const getNodeRequestOptions = (request)=>{\n    const { parsedURL } = request[INTERNALS];\n    const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](request[INTERNALS].headers);\n    // Fetch step 1.3\n    if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n    }\n    // HTTP-network-or-cache fetch steps 2.4-2.7\n    let contentLengthValue = null;\n    if (request.body === null && /^(post|put)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n    }\n    if (request.body !== null) {\n        const totalBytes = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.getTotalBytes)(request);\n        // Set Content-Length if totalBytes is a number (that is not NaN)\n        if (typeof totalBytes === \"number\" && !Number.isNaN(totalBytes)) {\n            contentLengthValue = String(totalBytes);\n        }\n    }\n    if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n    }\n    // 4.1. Main fetch, step 2.6\n    // > If request's referrer policy is the empty string, then set request's referrer policy to the\n    // > default referrer policy.\n    if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_REFERRER_POLICY;\n    }\n    // 4.1. Main fetch, step 2.7\n    // > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n    // > determine request's referrer.\n    if (request.referrer && request.referrer !== \"no-referrer\") {\n        request[INTERNALS].referrer = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.determineRequestsReferrer)(request);\n    } else {\n        request[INTERNALS].referrer = \"no-referrer\";\n    }\n    // 4.5. HTTP-network-or-cache fetch, step 6.9\n    // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n    // >  and isomorphic encoded, to httpRequest's header list.\n    if (request[INTERNALS].referrer instanceof URL) {\n        headers.set(\"Referer\", request.referrer);\n    }\n    // HTTP-network-or-cache fetch step 2.11\n    if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch\");\n    }\n    // HTTP-network-or-cache fetch step 2.15\n    if (request.compress && !headers.has(\"Accept-Encoding\")) {\n        headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n    }\n    let { agent } = request;\n    if (typeof agent === \"function\") {\n        agent = agent(parsedURL);\n    }\n    // HTTP-network fetch step 4.2\n    // chunked encoding is handled by Node.js\n    const search = (0,_utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__.getSearch)(parsedURL);\n    // Pass the full URL directly to request(), but overwrite the following\n    // options:\n    const options = {\n        // Overwrite search to retain trailing ? (issue #776)\n        path: parsedURL.pathname + search,\n        // The following options are not expressed in the URL\n        method: request.method,\n        headers: headers[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: request.insecureHTTPParser,\n        agent\n    };\n    return {\n        /** @type {URL} */ parsedURL,\n        options\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/response.js":
/*!*************************************************!*\
  !*** ./node_modules/node-fetch/src/response.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Response)\n/* harmony export */ });\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/node-fetch/src/utils/is-redirect.js\");\n/**\n * Response.js\n *\n * Response class provides content decoding\n */ \n\n\nconst INTERNALS = Symbol(\"Response internals\");\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Response extends _body_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(body = null, options = {}){\n        super(body, options);\n        // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n        const status = options.status != null ? options.status : 200;\n        const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options.headers);\n        if (body !== null && !headers.has(\"Content-Type\")) {\n            const contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_0__.extractContentType)(body, this);\n            if (contentType) {\n                headers.append(\"Content-Type\", contentType);\n            }\n        }\n        this[INTERNALS] = {\n            type: \"default\",\n            url: options.url,\n            status,\n            statusText: options.statusText || \"\",\n            headers,\n            counter: options.counter,\n            highWaterMark: options.highWaterMark\n        };\n    }\n    get type() {\n        return this[INTERNALS].type;\n    }\n    get url() {\n        return this[INTERNALS].url || \"\";\n    }\n    get status() {\n        return this[INTERNALS].status;\n    }\n    /**\n\t * Convenience property representing if the request ended normally\n\t */ get ok() {\n        return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n    }\n    get redirected() {\n        return this[INTERNALS].counter > 0;\n    }\n    get statusText() {\n        return this[INTERNALS].statusText;\n    }\n    get headers() {\n        return this[INTERNALS].headers;\n    }\n    get highWaterMark() {\n        return this[INTERNALS].highWaterMark;\n    }\n    /**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */ clone() {\n        return new Response((0,_body_js__WEBPACK_IMPORTED_MODULE_0__.clone)(this, this.highWaterMark), {\n            type: this.type,\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok,\n            redirected: this.redirected,\n            size: this.size,\n            highWaterMark: this.highWaterMark\n        });\n    }\n    /**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */ static redirect(url, status = 302) {\n        if (!(0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__.isRedirect)(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        return new Response(null, {\n            headers: {\n                location: new URL(url).toString()\n            },\n            status\n        });\n    }\n    static error() {\n        const response = new Response(null, {\n            status: 0,\n            statusText: \"\"\n        });\n        response[INTERNALS].type = \"error\";\n        return response;\n    }\n    static json(data = undefined, init = {}) {\n        const body = JSON.stringify(data);\n        if (body === undefined) {\n            throw new TypeError(\"data is not JSON serializable\");\n        }\n        const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](init && init.headers);\n        if (!headers.has(\"content-type\")) {\n            headers.set(\"content-type\", \"application/json\");\n        }\n        return new Response(body, {\n            ...init,\n            headers\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Response\";\n    }\n}\nObject.defineProperties(Response.prototype, {\n    type: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    status: {\n        enumerable: true\n    },\n    ok: {\n        enumerable: true\n    },\n    redirected: {\n        enumerable: true\n    },\n    statusText: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/utils/get-search.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/get-search.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSearch: () => (/* binding */ getSearch)\n/* harmony export */ });\nconst getSearch = (parsedURL)=>{\n    if (parsedURL.search) {\n        return parsedURL.search;\n    }\n    const lastOffset = parsedURL.href.length - 1;\n    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === \"#\" ? \"#\" : \"\");\n    return parsedURL.href[lastOffset - hash.length] === \"?\" ? \"?\" : \"\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvZ2V0LXNlYXJjaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsWUFBWUMsQ0FBQUE7SUFDeEIsSUFBSUEsVUFBVUMsTUFBTSxFQUFFO1FBQ3JCLE9BQU9ELFVBQVVDLE1BQU07SUFDeEI7SUFFQSxNQUFNQyxhQUFhRixVQUFVRyxJQUFJLENBQUNDLE1BQU0sR0FBRztJQUMzQyxNQUFNQyxPQUFPTCxVQUFVSyxJQUFJLElBQUtMLENBQUFBLFVBQVVHLElBQUksQ0FBQ0QsV0FBVyxLQUFLLE1BQU0sTUFBTSxFQUFDO0lBQzVFLE9BQU9GLFVBQVVHLElBQUksQ0FBQ0QsYUFBYUcsS0FBS0QsTUFBTSxDQUFDLEtBQUssTUFBTSxNQUFNO0FBQ2pFLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvZ2V0LXNlYXJjaC5qcz80N2Q3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnZXRTZWFyY2ggPSBwYXJzZWRVUkwgPT4ge1xuXHRpZiAocGFyc2VkVVJMLnNlYXJjaCkge1xuXHRcdHJldHVybiBwYXJzZWRVUkwuc2VhcmNoO1xuXHR9XG5cblx0Y29uc3QgbGFzdE9mZnNldCA9IHBhcnNlZFVSTC5ocmVmLmxlbmd0aCAtIDE7XG5cdGNvbnN0IGhhc2ggPSBwYXJzZWRVUkwuaGFzaCB8fCAocGFyc2VkVVJMLmhyZWZbbGFzdE9mZnNldF0gPT09ICcjJyA/ICcjJyA6ICcnKTtcblx0cmV0dXJuIHBhcnNlZFVSTC5ocmVmW2xhc3RPZmZzZXQgLSBoYXNoLmxlbmd0aF0gPT09ICc/JyA/ICc/JyA6ICcnO1xufTtcbiJdLCJuYW1lcyI6WyJnZXRTZWFyY2giLCJwYXJzZWRVUkwiLCJzZWFyY2giLCJsYXN0T2Zmc2V0IiwiaHJlZiIsImxlbmd0aCIsImhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/utils/get-search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/utils/is-redirect.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/is-redirect.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRedirect: () => (/* binding */ isRedirect)\n/* harmony export */ });\nconst redirectStatus = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */ const isRedirect = (code)=>{\n    return redirectStatus.has(code);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvaXMtcmVkaXJlY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGlCQUFpQixJQUFJQyxJQUFJO0lBQUM7SUFBSztJQUFLO0lBQUs7SUFBSztDQUFJO0FBRXhEOzs7OztDQUtDLEdBQ00sTUFBTUMsYUFBYUMsQ0FBQUE7SUFDekIsT0FBT0gsZUFBZUksR0FBRyxDQUFDRDtBQUMzQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2lzLXJlZGlyZWN0LmpzPzE1ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVkaXJlY3RTdGF0dXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuXG4vKipcbiAqIFJlZGlyZWN0IGNvZGUgbWF0Y2hpbmdcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZSAtIFN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNSZWRpcmVjdCA9IGNvZGUgPT4ge1xuXHRyZXR1cm4gcmVkaXJlY3RTdGF0dXMuaGFzKGNvZGUpO1xufTtcbiJdLCJuYW1lcyI6WyJyZWRpcmVjdFN0YXR1cyIsIlNldCIsImlzUmVkaXJlY3QiLCJjb2RlIiwiaGFzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/utils/is-redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/utils/is.js":
/*!*************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/is.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAbortSignal: () => (/* binding */ isAbortSignal),\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isDomainOrSubdomain: () => (/* binding */ isDomainOrSubdomain),\n/* harmony export */   isSameProtocol: () => (/* binding */ isSameProtocol),\n/* harmony export */   isURLSearchParameters: () => (/* binding */ isURLSearchParameters)\n/* harmony export */ });\n/**\n * Is.js\n *\n * Object type checks.\n */ const NAME = Symbol.toStringTag;\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isURLSearchParameters = (object)=>{\n    return typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && typeof object.sort === \"function\" && object[NAME] === \"URLSearchParams\";\n};\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isBlob = (object)=>{\n    return object && typeof object === \"object\" && typeof object.arrayBuffer === \"function\" && typeof object.type === \"string\" && typeof object.stream === \"function\" && typeof object.constructor === \"function\" && /^(Blob|File)$/.test(object[NAME]);\n};\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isAbortSignal = (object)=>{\n    return typeof object === \"object\" && (object[NAME] === \"AbortSignal\" || object[NAME] === \"EventTarget\");\n};\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isDomainOrSubdomain = (destination, original)=>{\n    const orig = new URL(original).hostname;\n    const dest = new URL(destination).hostname;\n    return orig === dest || orig.endsWith(`.${dest}`);\n};\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isSameProtocol = (destination, original)=>{\n    const orig = new URL(original).protocol;\n    const dest = new URL(destination).protocol;\n    return orig === dest;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRUQsTUFBTUEsT0FBT0MsT0FBT0MsV0FBVztBQUUvQjs7Ozs7Q0FLQyxHQUNNLE1BQU1DLHdCQUF3QkMsQ0FBQUE7SUFDcEMsT0FDQyxPQUFPQSxXQUFXLFlBQ2xCLE9BQU9BLE9BQU9DLE1BQU0sS0FBSyxjQUN6QixPQUFPRCxPQUFPRSxNQUFNLEtBQUssY0FDekIsT0FBT0YsT0FBT0csR0FBRyxLQUFLLGNBQ3RCLE9BQU9ILE9BQU9JLE1BQU0sS0FBSyxjQUN6QixPQUFPSixPQUFPSyxHQUFHLEtBQUssY0FDdEIsT0FBT0wsT0FBT00sR0FBRyxLQUFLLGNBQ3RCLE9BQU9OLE9BQU9PLElBQUksS0FBSyxjQUN2QlAsTUFBTSxDQUFDSixLQUFLLEtBQUs7QUFFbkIsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNWSxTQUFTUixDQUFBQTtJQUNyQixPQUNDQSxVQUNBLE9BQU9BLFdBQVcsWUFDbEIsT0FBT0EsT0FBT1MsV0FBVyxLQUFLLGNBQzlCLE9BQU9ULE9BQU9VLElBQUksS0FBSyxZQUN2QixPQUFPVixPQUFPVyxNQUFNLEtBQUssY0FDekIsT0FBT1gsT0FBT1ksV0FBVyxLQUFLLGNBQzlCLGdCQUFnQkMsSUFBSSxDQUFDYixNQUFNLENBQUNKLEtBQUs7QUFFbkMsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNa0IsZ0JBQWdCZCxDQUFBQTtJQUM1QixPQUNDLE9BQU9BLFdBQVcsWUFDakJBLENBQUFBLE1BQU0sQ0FBQ0osS0FBSyxLQUFLLGlCQUNqQkksTUFBTSxDQUFDSixLQUFLLEtBQUssYUFBWTtBQUdoQyxFQUFFO0FBRUY7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1tQixzQkFBc0IsQ0FBQ0MsYUFBYUM7SUFDaEQsTUFBTUMsT0FBTyxJQUFJQyxJQUFJRixVQUFVRyxRQUFRO0lBQ3ZDLE1BQU1DLE9BQU8sSUFBSUYsSUFBSUgsYUFBYUksUUFBUTtJQUUxQyxPQUFPRixTQUFTRyxRQUFRSCxLQUFLSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUVELEtBQUssQ0FBQztBQUNqRCxFQUFFO0FBRUY7Ozs7OztDQU1DLEdBQ00sTUFBTUUsaUJBQWlCLENBQUNQLGFBQWFDO0lBQzNDLE1BQU1DLE9BQU8sSUFBSUMsSUFBSUYsVUFBVU8sUUFBUTtJQUN2QyxNQUFNSCxPQUFPLElBQUlGLElBQUlILGFBQWFRLFFBQVE7SUFFMUMsT0FBT04sU0FBU0c7QUFDakIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL3NyYy91dGlscy9pcy5qcz9lNGFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSXMuanNcbiAqXG4gKiBPYmplY3QgdHlwZSBjaGVja3MuXG4gKi9cblxuY29uc3QgTkFNRSA9IFN5bWJvbC50b1N0cmluZ1RhZztcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMjk2I2lzc3VlY29tbWVudC0zMDc1OTgxNDNcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNoZWNrIGZvclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVVJMU2VhcmNoUGFyYW1ldGVycyA9IG9iamVjdCA9PiB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmFwcGVuZCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuZGVsZXRlID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5nZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmdldEFsbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuaGFzID09PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIG9iamVjdC5zZXQgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnNvcnQgPT09ICdmdW5jdGlvbicgJiZcblx0XHRvYmplY3RbTkFNRV0gPT09ICdVUkxTZWFyY2hQYXJhbXMnXG5cdCk7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmplY3RgIGlzIGEgVzNDIGBCbG9iYCBvYmplY3QgKHdoaWNoIGBGaWxlYCBpbmhlcml0cyBmcm9tKVxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgY29uc3QgaXNCbG9iID0gb2JqZWN0ID0+IHtcblx0cmV0dXJuIChcblx0XHRvYmplY3QgJiZcblx0XHR0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiBvYmplY3QuYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LnR5cGUgPT09ICdzdHJpbmcnICYmXG5cdFx0dHlwZW9mIG9iamVjdC5zdHJlYW0gPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmXG5cdFx0L14oQmxvYnxGaWxlKSQvLnRlc3Qob2JqZWN0W05BTUVdKVxuXHQpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBpbnN0YW5jZSBvZiBBYm9ydFNpZ25hbC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNoZWNrIGZvclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQWJvcnRTaWduYWwgPSBvYmplY3QgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIChcblx0XHRcdG9iamVjdFtOQU1FXSA9PT0gJ0Fib3J0U2lnbmFsJyB8fFxuXHRcdFx0b2JqZWN0W05BTUVdID09PSAnRXZlbnRUYXJnZXQnXG5cdFx0KVxuXHQpO1xufTtcblxuLyoqXG4gKiBpc0RvbWFpbk9yU3ViZG9tYWluIHJlcG9ydHMgd2hldGhlciBzdWIgaXMgYSBzdWJkb21haW4gKG9yIGV4YWN0IG1hdGNoKSBvZlxuICogdGhlIHBhcmVudCBkb21haW4uXG4gKlxuICogQm90aCBkb21haW5zIG11c3QgYWxyZWFkeSBiZSBpbiBjYW5vbmljYWwgZm9ybS5cbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gb3JpZ2luYWxcbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gZGVzdGluYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRG9tYWluT3JTdWJkb21haW4gPSAoZGVzdGluYXRpb24sIG9yaWdpbmFsKSA9PiB7XG5cdGNvbnN0IG9yaWcgPSBuZXcgVVJMKG9yaWdpbmFsKS5ob3N0bmFtZTtcblx0Y29uc3QgZGVzdCA9IG5ldyBVUkwoZGVzdGluYXRpb24pLmhvc3RuYW1lO1xuXG5cdHJldHVybiBvcmlnID09PSBkZXN0IHx8IG9yaWcuZW5kc1dpdGgoYC4ke2Rlc3R9YCk7XG59O1xuXG4vKipcbiAqIGlzU2FtZVByb3RvY29sIHJlcG9ydHMgd2hldGhlciB0aGUgdHdvIHByb3ZpZGVkIFVSTHMgdXNlIHRoZSBzYW1lIHByb3RvY29sLlxuICpcbiAqIEJvdGggZG9tYWlucyBtdXN0IGFscmVhZHkgYmUgaW4gY2Fub25pY2FsIGZvcm0uXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IG9yaWdpbmFsXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IGRlc3RpbmF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBpc1NhbWVQcm90b2NvbCA9IChkZXN0aW5hdGlvbiwgb3JpZ2luYWwpID0+IHtcblx0Y29uc3Qgb3JpZyA9IG5ldyBVUkwob3JpZ2luYWwpLnByb3RvY29sO1xuXHRjb25zdCBkZXN0ID0gbmV3IFVSTChkZXN0aW5hdGlvbikucHJvdG9jb2w7XG5cblx0cmV0dXJuIG9yaWcgPT09IGRlc3Q7XG59O1xuIl0sIm5hbWVzIjpbIk5BTUUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImlzVVJMU2VhcmNoUGFyYW1ldGVycyIsIm9iamVjdCIsImFwcGVuZCIsImRlbGV0ZSIsImdldCIsImdldEFsbCIsImhhcyIsInNldCIsInNvcnQiLCJpc0Jsb2IiLCJhcnJheUJ1ZmZlciIsInR5cGUiLCJzdHJlYW0iLCJjb25zdHJ1Y3RvciIsInRlc3QiLCJpc0Fib3J0U2lnbmFsIiwiaXNEb21haW5PclN1YmRvbWFpbiIsImRlc3RpbmF0aW9uIiwib3JpZ2luYWwiLCJvcmlnIiwiVVJMIiwiaG9zdG5hbWUiLCJkZXN0IiwiZW5kc1dpdGgiLCJpc1NhbWVQcm90b2NvbCIsInByb3RvY29sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/utils/is.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/utils/multipart-parser.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/multipart-parser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFormData: () => (/* binding */ toFormData)\n/* harmony export */ });\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n\n\nlet s = 0;\nconst S = {\n    START_BOUNDARY: s++,\n    HEADER_FIELD_START: s++,\n    HEADER_FIELD: s++,\n    HEADER_VALUE_START: s++,\n    HEADER_VALUE: s++,\n    HEADER_VALUE_ALMOST_DONE: s++,\n    HEADERS_ALMOST_DONE: s++,\n    PART_DATA_START: s++,\n    PART_DATA: s++,\n    END: s++\n};\nlet f = 1;\nconst F = {\n    PART_BOUNDARY: f,\n    LAST_BOUNDARY: f *= 2\n};\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\nconst lower = (c)=>c | 0x20;\nconst noop = ()=>{};\nclass MultipartParser {\n    /**\n\t * @param {string} boundary\n\t */ constructor(boundary){\n        this.index = 0;\n        this.flags = 0;\n        this.onHeaderEnd = noop;\n        this.onHeaderField = noop;\n        this.onHeadersEnd = noop;\n        this.onHeaderValue = noop;\n        this.onPartBegin = noop;\n        this.onPartData = noop;\n        this.onPartEnd = noop;\n        this.boundaryChars = {};\n        boundary = \"\\r\\n--\" + boundary;\n        const ui8a = new Uint8Array(boundary.length);\n        for(let i = 0; i < boundary.length; i++){\n            ui8a[i] = boundary.charCodeAt(i);\n            this.boundaryChars[ui8a[i]] = true;\n        }\n        this.boundary = ui8a;\n        this.lookbehind = new Uint8Array(this.boundary.length + 8);\n        this.state = S.START_BOUNDARY;\n    }\n    /**\n\t * @param {Uint8Array} data\n\t */ write(data) {\n        let i = 0;\n        const length_ = data.length;\n        let previousIndex = this.index;\n        let { lookbehind, boundary, boundaryChars, index, state, flags } = this;\n        const boundaryLength = this.boundary.length;\n        const boundaryEnd = boundaryLength - 1;\n        const bufferLength = data.length;\n        let c;\n        let cl;\n        const mark = (name)=>{\n            this[name + \"Mark\"] = i;\n        };\n        const clear = (name)=>{\n            delete this[name + \"Mark\"];\n        };\n        const callback = (callbackSymbol, start, end, ui8a)=>{\n            if (start === undefined || start !== end) {\n                this[callbackSymbol](ui8a && ui8a.subarray(start, end));\n            }\n        };\n        const dataCallback = (name, clear)=>{\n            const markSymbol = name + \"Mark\";\n            if (!(markSymbol in this)) {\n                return;\n            }\n            if (clear) {\n                callback(name, this[markSymbol], i, data);\n                delete this[markSymbol];\n            } else {\n                callback(name, this[markSymbol], data.length, data);\n                this[markSymbol] = 0;\n            }\n        };\n        for(i = 0; i < length_; i++){\n            c = data[i];\n            switch(state){\n                case S.START_BOUNDARY:\n                    if (index === boundary.length - 2) {\n                        if (c === HYPHEN) {\n                            flags |= F.LAST_BOUNDARY;\n                        } else if (c !== CR) {\n                            return;\n                        }\n                        index++;\n                        break;\n                    } else if (index - 1 === boundary.length - 2) {\n                        if (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n                            state = S.END;\n                            flags = 0;\n                        } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n                            index = 0;\n                            callback(\"onPartBegin\");\n                            state = S.HEADER_FIELD_START;\n                        } else {\n                            return;\n                        }\n                        break;\n                    }\n                    if (c !== boundary[index + 2]) {\n                        index = -2;\n                    }\n                    if (c === boundary[index + 2]) {\n                        index++;\n                    }\n                    break;\n                case S.HEADER_FIELD_START:\n                    state = S.HEADER_FIELD;\n                    mark(\"onHeaderField\");\n                    index = 0;\n                // falls through\n                case S.HEADER_FIELD:\n                    if (c === CR) {\n                        clear(\"onHeaderField\");\n                        state = S.HEADERS_ALMOST_DONE;\n                        break;\n                    }\n                    index++;\n                    if (c === HYPHEN) {\n                        break;\n                    }\n                    if (c === COLON) {\n                        if (index === 1) {\n                            // empty header field\n                            return;\n                        }\n                        dataCallback(\"onHeaderField\", true);\n                        state = S.HEADER_VALUE_START;\n                        break;\n                    }\n                    cl = lower(c);\n                    if (cl < A || cl > Z) {\n                        return;\n                    }\n                    break;\n                case S.HEADER_VALUE_START:\n                    if (c === SPACE) {\n                        break;\n                    }\n                    mark(\"onHeaderValue\");\n                    state = S.HEADER_VALUE;\n                // falls through\n                case S.HEADER_VALUE:\n                    if (c === CR) {\n                        dataCallback(\"onHeaderValue\", true);\n                        callback(\"onHeaderEnd\");\n                        state = S.HEADER_VALUE_ALMOST_DONE;\n                    }\n                    break;\n                case S.HEADER_VALUE_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    state = S.HEADER_FIELD_START;\n                    break;\n                case S.HEADERS_ALMOST_DONE:\n                    if (c !== LF) {\n                        return;\n                    }\n                    callback(\"onHeadersEnd\");\n                    state = S.PART_DATA_START;\n                    break;\n                case S.PART_DATA_START:\n                    state = S.PART_DATA;\n                    mark(\"onPartData\");\n                // falls through\n                case S.PART_DATA:\n                    previousIndex = index;\n                    if (index === 0) {\n                        // boyer-moore derrived algorithm to safely skip non-boundary data\n                        i += boundaryEnd;\n                        while(i < bufferLength && !(data[i] in boundaryChars)){\n                            i += boundaryLength;\n                        }\n                        i -= boundaryEnd;\n                        c = data[i];\n                    }\n                    if (index < boundary.length) {\n                        if (boundary[index] === c) {\n                            if (index === 0) {\n                                dataCallback(\"onPartData\", true);\n                            }\n                            index++;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index === boundary.length) {\n                        index++;\n                        if (c === CR) {\n                            // CR = part boundary\n                            flags |= F.PART_BOUNDARY;\n                        } else if (c === HYPHEN) {\n                            // HYPHEN = end boundary\n                            flags |= F.LAST_BOUNDARY;\n                        } else {\n                            index = 0;\n                        }\n                    } else if (index - 1 === boundary.length) {\n                        if (flags & F.PART_BOUNDARY) {\n                            index = 0;\n                            if (c === LF) {\n                                // unset the PART_BOUNDARY flag\n                                flags &= ~F.PART_BOUNDARY;\n                                callback(\"onPartEnd\");\n                                callback(\"onPartBegin\");\n                                state = S.HEADER_FIELD_START;\n                                break;\n                            }\n                        } else if (flags & F.LAST_BOUNDARY) {\n                            if (c === HYPHEN) {\n                                callback(\"onPartEnd\");\n                                state = S.END;\n                                flags = 0;\n                            } else {\n                                index = 0;\n                            }\n                        } else {\n                            index = 0;\n                        }\n                    }\n                    if (index > 0) {\n                        // when matching a possible boundary, keep a lookbehind reference\n                        // in case it turns out to be a false lead\n                        lookbehind[index - 1] = c;\n                    } else if (previousIndex > 0) {\n                        // if our boundary turned out to be rubbish, the captured lookbehind\n                        // belongs to partData\n                        const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n                        callback(\"onPartData\", 0, previousIndex, _lookbehind);\n                        previousIndex = 0;\n                        mark(\"onPartData\");\n                        // reconsider the current character even so it interrupted the sequence\n                        // it could be the beginning of a new sequence\n                        i--;\n                    }\n                    break;\n                case S.END:\n                    break;\n                default:\n                    throw new Error(`Unexpected state entered: ${state}`);\n            }\n        }\n        dataCallback(\"onHeaderField\");\n        dataCallback(\"onHeaderValue\");\n        dataCallback(\"onPartData\");\n        // Update properties for the next call\n        this.index = index;\n        this.state = state;\n        this.flags = flags;\n    }\n    end() {\n        if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {\n            this.onPartEnd();\n        } else if (this.state !== S.END) {\n            throw new Error(\"MultipartParser.end(): stream ended unexpectedly\");\n        }\n    }\n}\nfunction _fileName(headerValue) {\n    // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n    const m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n    if (!m) {\n        return;\n    }\n    const match = m[2] || m[3] || \"\";\n    let filename = match.slice(match.lastIndexOf(\"\\\\\") + 1);\n    filename = filename.replace(/%22/g, '\"');\n    filename = filename.replace(/&#(\\d{4});/g, (m, code)=>{\n        return String.fromCharCode(code);\n    });\n    return filename;\n}\nasync function toFormData(Body, ct) {\n    if (!/multipart/i.test(ct)) {\n        throw new TypeError(\"Failed to fetch\");\n    }\n    const m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n    if (!m) {\n        throw new TypeError(\"no or bad content-type header, no multipart boundary\");\n    }\n    const parser = new MultipartParser(m[1] || m[2]);\n    let headerField;\n    let headerValue;\n    let entryValue;\n    let entryName;\n    let contentType;\n    let filename;\n    const entryChunks = [];\n    const formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__.FormData();\n    const onPartData = (ui8a)=>{\n        entryValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    const appendToFile = (ui8a)=>{\n        entryChunks.push(ui8a);\n    };\n    const appendFileToFormData = ()=>{\n        const file = new fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__.File(entryChunks, filename, {\n            type: contentType\n        });\n        formData.append(entryName, file);\n    };\n    const appendEntryToFormData = ()=>{\n        formData.append(entryName, entryValue);\n    };\n    const decoder = new TextDecoder(\"utf-8\");\n    decoder.decode();\n    parser.onPartBegin = function() {\n        parser.onPartData = onPartData;\n        parser.onPartEnd = appendEntryToFormData;\n        headerField = \"\";\n        headerValue = \"\";\n        entryValue = \"\";\n        entryName = \"\";\n        contentType = \"\";\n        filename = null;\n        entryChunks.length = 0;\n    };\n    parser.onHeaderField = function(ui8a) {\n        headerField += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderValue = function(ui8a) {\n        headerValue += decoder.decode(ui8a, {\n            stream: true\n        });\n    };\n    parser.onHeaderEnd = function() {\n        headerValue += decoder.decode();\n        headerField = headerField.toLowerCase();\n        if (headerField === \"content-disposition\") {\n            // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n            const m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n            if (m) {\n                entryName = m[2] || m[3] || \"\";\n            }\n            filename = _fileName(headerValue);\n            if (filename) {\n                parser.onPartData = appendToFile;\n                parser.onPartEnd = appendFileToFormData;\n            }\n        } else if (headerField === \"content-type\") {\n            contentType = headerValue;\n        }\n        headerValue = \"\";\n        headerField = \"\";\n    };\n    for await (const chunk of Body){\n        parser.write(chunk);\n    }\n    parser.end();\n    return formData;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/utils/multipart-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch/src/utils/referrer.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/referrer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REFERRER_POLICY: () => (/* binding */ DEFAULT_REFERRER_POLICY),\n/* harmony export */   ReferrerPolicy: () => (/* binding */ ReferrerPolicy),\n/* harmony export */   determineRequestsReferrer: () => (/* binding */ determineRequestsReferrer),\n/* harmony export */   isOriginPotentiallyTrustworthy: () => (/* binding */ isOriginPotentiallyTrustworthy),\n/* harmony export */   isUrlPotentiallyTrustworthy: () => (/* binding */ isUrlPotentiallyTrustworthy),\n/* harmony export */   parseReferrerPolicyFromHeader: () => (/* binding */ parseReferrerPolicyFromHeader),\n/* harmony export */   stripURLForUseAsAReferrer: () => (/* binding */ stripURLForUseAsAReferrer),\n/* harmony export */   validateReferrerPolicy: () => (/* binding */ validateReferrerPolicy)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */ /**\n * @module utils/referrer\n * @private\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */ function stripURLForUseAsAReferrer(url, originOnly = false) {\n    // 1. If url is null, return no referrer.\n    if (url == null) {\n        return \"no-referrer\";\n    }\n    url = new URL(url);\n    // 2. If url's scheme is a local scheme, then return no referrer.\n    if (/^(about|blob|data):$/.test(url.protocol)) {\n        return \"no-referrer\";\n    }\n    // 3. Set url's username to the empty string.\n    url.username = \"\";\n    // 4. Set url's password to null.\n    // Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n    url.password = \"\";\n    // 5. Set url's fragment to null.\n    // Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n    url.hash = \"\";\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 6.1. Set url's path to null.\n        // Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n        url.pathname = \"\";\n        // 6.2. Set url's query to null.\n        // Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n        url.search = \"\";\n    }\n    // 7. Return url.\n    return url;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */ const ReferrerPolicy = new Set([\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n]);\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */ const DEFAULT_REFERRER_POLICY = \"strict-origin-when-cross-origin\";\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */ function validateReferrerPolicy(referrerPolicy) {\n    if (!ReferrerPolicy.has(referrerPolicy)) {\n        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n    }\n    return referrerPolicy;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isOriginPotentiallyTrustworthy(url) {\n    // 1. If origin is an opaque origin, return \"Not Trustworthy\".\n    // Not applicable\n    // 2. Assert: origin is a tuple origin.\n    // Not for implementations\n    // 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n    if (/^(http|ws)s:$/.test(url.protocol)) {\n        return true;\n    }\n    // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n    const hostIp = url.host.replace(/(^\\[)|(]$)/g, \"\");\n    const hostIPVersion = (0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(hostIp);\n    if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n        return true;\n    }\n    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n        return true;\n    }\n    // 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n    // We are returning FALSE here because we cannot ensure conformance to\n    // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n    if (url.host === \"localhost\" || url.host.endsWith(\".localhost\")) {\n        return false;\n    }\n    // 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n    if (url.protocol === \"file:\") {\n        return true;\n    }\n    // 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n    // Not supported\n    // 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n    // Not supported\n    // 9. Return \"Not Trustworthy\".\n    return false;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isUrlPotentiallyTrustworthy(url) {\n    // 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n    if (/^about:(blank|srcdoc)$/.test(url)) {\n        return true;\n    }\n    // 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n    if (url.protocol === \"data:\") {\n        return true;\n    }\n    // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n    // created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n    // trustworthy.\n    if (/^(blob|filesystem):$/.test(url.protocol)) {\n        return true;\n    }\n    // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n    return isOriginPotentiallyTrustworthy(url);\n}\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */ /**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */ function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {\n    // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n    // these cases:\n    // > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n    // > Note: If request's referrer policy is the empty string, Fetch will not call into this\n    // > algorithm.\n    if (request.referrer === \"no-referrer\" || request.referrerPolicy === \"\") {\n        return null;\n    }\n    // 1. Let policy be request's associated referrer policy.\n    const policy = request.referrerPolicy;\n    // 2. Let environment be request's client.\n    // not applicable to node.js\n    // 3. Switch on request's referrer:\n    if (request.referrer === \"about:client\") {\n        return \"no-referrer\";\n    }\n    // \"a URL\": Let referrerSource be request's referrer.\n    const referrerSource = request.referrer;\n    // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n    let referrerURL = stripURLForUseAsAReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n    //    origin-only flag set to true.\n    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n    //    referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n    //    policy considerations in the interests of minimizing data leakage. For example, the user\n    //    agent could strip the URL down to an origin, modify its host, replace it with an empty\n    //    string, etc.\n    if (referrerURLCallback) {\n        referrerURL = referrerURLCallback(referrerURL);\n    }\n    if (referrerOriginCallback) {\n        referrerOrigin = referrerOriginCallback(referrerOrigin);\n    }\n    // 8.Execute the statements corresponding to the value of policy:\n    const currentURL = new URL(request.url);\n    switch(policy){\n        case \"no-referrer\":\n            return \"no-referrer\";\n        case \"origin\":\n            return referrerOrigin;\n        case \"unsafe-url\":\n            return referrerURL;\n        case \"strict-origin\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerOrigin.\n            return referrerOrigin.toString();\n        case \"strict-origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 3. Return referrerOrigin.\n            return referrerOrigin;\n        case \"same-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. Return no referrer.\n            return \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // Return referrerOrigin.\n            return referrerOrigin;\n        case \"no-referrer-when-downgrade\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerURL.\n            return referrerURL;\n        default:\n            throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n    }\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */ function parseReferrerPolicyFromHeader(headers) {\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n    //    and response’s header list.\n    const policyTokens = (headers.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n    // 2. Let policy be the empty string.\n    let policy = \"\";\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n    //    string, then set policy to token.\n    // Note: This algorithm loops over multiple policy values to allow deployment of new policy\n    // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n    for (const token of policyTokens){\n        if (token && ReferrerPolicy.has(token)) {\n            policy = token;\n        }\n    }\n    // 4. Return policy.\n    return policy;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch/src/utils/referrer.js\n");

/***/ })

};
;